<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--读取properties-->
    <!--    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">-->
    <!--        <property name="locations">-->
    <!--            <list>-->
    <!--                <value>classpath:properties/db.properties</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--    </bean>-->

    <context:property-placeholder location="classpath:properties/db.properties" ignore-unresolvable="true"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.druid.driverClassName}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${db.druid.url}"/>
        <property name="username" value="${db.druid.username}"/>
        <property name="password" value="${db.druid.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db.druid.initialSize:10}"/>
        <property name="minIdle" value="${db.druid.minIdle:5}"/>
        <!--        <property name="maxActive" value="${db.druid.maxActive:100}"/>-->

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db.druid.maxWait:60000}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.druid.timeBetweenEvictionRunsMillis:60000}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${db.druid.minEvictableIdleTimeMillis:300000}"/>

        <property name="validationQuery" value="${db.druid.validationQuery}"/>
        <property name="testWhileIdle" value="${db.druid.testWhileIdle:false}"/>
        <property name="testOnBorrow" value="${db.druid.testOnBorrow:false}"/>
        <property name="testOnReturn" value="${db.druid.testOnReturn:false}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${db.druid.poolPreparedStatements:false}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" primary="true">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
        <property name="mapperLocations">
            <array>
                <value>classpath*:mapper/biz/*Mapper.xml</value>
            </array>
        </property>
    </bean>

    <!-- mybatis.spring自动映射 -->
    <bean id="mybatisMapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cloud.biz.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 规定需要控制事务的类必须以"ServiceImpl"结尾，且方法名必须以save,delete,add,modify,update,insert,remove开头 -->
    <!--为方便下发到省里的版本进行平台实现层的切换控制，事务通过外部xml进行配置，请不要在代码中通过注解的方式进行事务控制-->
    <aop:config>
        <!-- 作用在哪些组件上 -->
        <aop:pointcut expression="execution(public * com.cloud..*ServiceImpl.*(..))" id="pointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>

    <!-- 采用xml配置的方式：使用别人写好的功能，没有源码，就可以用xml配置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 读取 -->
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <!-- 新增 -->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- 删除 -->
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- 修改 -->
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- 其他 -->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>




    <!-- 第二个数据源配置 -->
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.druid.driverClassName2}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${db.druid.url2}"/>
        <property name="username" value="${db.druid.username2}"/>
        <property name="password" value="${db.druid.password2}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db.druid.initialSize:10}"/>
        <property name="minIdle" value="${db.druid.minIdle:5}"/>
        <!--        <property name="maxActive" value="${db.druid.maxActive:100}"/>-->

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db.druid.maxWait:60000}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.druid.timeBetweenEvictionRunsMillis:60000}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${db.druid.minEvictableIdleTimeMillis:300000}"/>

        <property name="validationQuery" value="${db.druid.validationQuery}"/>
        <property name="testWhileIdle" value="${db.druid.testWhileIdle:false}"/>
        <property name="testOnBorrow" value="${db.druid.testOnBorrow:false}"/>
        <property name="testOnReturn" value="${db.druid.testOnReturn:false}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${db.druid.poolPreparedStatements:false}"/>
    </bean>

    <bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean" primary="true">
        <property name="dataSource" ref="dataSource2"/>
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
        <property name="mapperLocations">
            <array>
                <value>classpath*:mapper/gather/*Mapper.xml</value>
            </array>
        </property>
    </bean>

    <!-- mybatis.spring自动映射 -->
    <bean id="mybatisMapperScanner2" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cloud.gather.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2" />
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager2"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource2"/>
    </bean>


    <!-- 采用注解方式：有源码的情况下，将注解加在方法上 -->
    <!-- 开启事务注解标记@Transactional，当调用带@Transactional标记的方法时，将txManager的事务管理功能切入进去 -->
    <tx:annotation-driven transaction-manager="transactionManager2"/>
    <!-- 在需要事务管理的方法上加上@Transactional注解即可 -->


    <!-- 加入Aspectj配置 -->
    <aop:aspectj-autoproxy/>

</beans>
